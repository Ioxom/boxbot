plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

mainClassName = "io.ioxcorp.ioxbox.consoleCrapEdition"
group 'io.ioxcorp'
version '0.3.1'
def jdaVersion = '4.2.0_228'
def jacksonVersion = '2.12.1'

repositories {
    mavenCentral()
    jcenter()
}

javafx {
    version = "15"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

dependencies {
    //json parsing library
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    //integration with discord
    implementation (group: 'net.dv8tion', name: 'JDA', version: jdaVersion) {
        exclude module: "opus-java"
    }
}

//language level is java 11
compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
    options.encoding = 'UTF-8'
}

//append the version to a properties file so we can access it from java code
task('addVersion') {
    doLast {
        file("src/main/resources/ioxbox.properties").write(
                "# ioxbox's version. this is stored here to allow project-wide version syncing\n" +
                        "version=$version"
        )
        file(".github/workflows/upload-artifact.yml").write(
                "name: upload-artifact\n"
                + "\n"
                + "on: [ push, pull_request ]\n"
                + "\n"
                + "jobs:\n"
                + "  upload-artifact:\n"
                + "\n"
                + "    runs-on: windows-latest\n"
                + "    steps:\n"
                + "    - uses: actions/checkout@v2\n"
                + "    - name: Set up JDK 11\n"
                + "      uses: actions/setup-java@v1\n"
                + "      with:\n"
                + "          java-version: 11\n"
                + "    - name: grant execute permission for gradlew\n"
                + "      run: chmod +x gradlew\n"
                + "    - run: ./gradlew build\n"
                + "    - uses: actions/upload-artifact@v2\n"
                + "      with:\n"
                + "        name: package\n"
                + "        path: build/libs/ioxbox-$version" + ".jar"
        )
    }
}

//create a jar that includes dependencies so it can be run
task uberJar(type: Jar) {

    manifest {
        attributes 'Main-Class': mainClassName, 'Manifest-Version': 1.0
    }

    from sourceSets.main.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    //ensure that the version is updated when building jars
    dependsOn(addVersion)
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}